/*
 * SETTE - Symbolic Execution based Test Tool Evaluator
 *
 * SETTE is a tool to help the evaluation and comparison of symbolic execution based test input 
 * generator tools.
 *
 * Budapest University of Technology and Economics (BME)
 *
 * Authors: Lajos Cseppentő <lajos.cseppento@inf.mit.bme.hu>, Zoltán Micskei <micskeiz@mit.bme.hu>
 *
 * Copyright 2014-2016
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
 * express or implied. See the License for the specific language governing permissions and 
 * limitations under the License.
 */
buildscript {
    repositories { maven { url 'https://plugins.gradle.org/m2/' } }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:+'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2'
    }
}

// Apply sonar on the root project
apply plugin: 'org.sonarqube'

sonarqube {
    properties { property 'sonar.sourceEncoding', 'UTF-8' }
}

// Apply same group, version and repos for all projects
allprojects {
    project.group = 'hu.bme.mit.sette'
    project.version = '2.0.0-SNAPSHOT'

    repositories {  jcenter() }
}

// Set up projects
subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    project.archivesBaseName = project.name
    project.sourceCompatibility = 1.8
    project.targetCompatibility = 1.8

    dependencies {
        testCompile 'org.codehaus.groovy:groovy-all:2.4.6:indy'
        testCompile 'junit:junit:4.12'
    }

    tasks.eclipse.dependsOn tasks.cleanEclipse
    tasks.idea.dependsOn tasks.cleanIdea

    sourceSets {
        main {
            java { srcDirs = ['src']}
            resources { srcDirs = ['resources']}
        }
        test { groovy { srcDirs = ['test']} }
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
    }

    task checkGroovyCompileStatic {
        group = 'Verification'
        description = 'Checks all .groovy files to have the @CompileStatic annotation'

        doLast {
            boolean error = false
            project.projectDir.eachFileRecurse (groovy.io.FileType.FILES) { File file ->
                if (file.name.endsWith('.groovy')) {
                    file.withReader { Reader reader ->
                        while (true) {
                            String line = reader.readLine()
                            if (line == null) {
                                break
                            } else if(line.startsWith('@CompileStatic')) {
                                return
                            }
                        }
                        logger.error "Missing @CompileStatic: $file"
                        error = true
                    }
                }
            }
            if (error) {
                throw new Exception('Please apply @CompileStatic to all .groovy files')
            }
        }
    }
}

//
// Project sette
//
project(':sette') {
    apply plugin: 'com.github.johnrengelman.shadow'
    String mainClass = 'hu.bme.mit.sette.application.SetteApplicationMain'
    File deployTarget = new File(project.projectDir, '../..').canonicalFile

    dependencies {
        compile project(':sette-core')
        compile 'args4j:args4j:2.33'
    }

    afterEvaluate {
        // Get JUnit JAR
        File jUnitJar = configurations.runtime.resolve().find { File f ->
            String path = f.absolutePath.replace('\\', '/')
            return path.contains('/junit/junit/') && path.toLowerCase().endsWith('.jar')
        }
        if (!jUnitJar) {
            throw new GradleException('Cannot find JUnit JAR on runtime classpath')
        }

        // Copy to resources directory
        File target = new File(sourceSets.main.resources.srcDirs.iterator().next(), 'junit.jar.res')
        target.parentFile.mkdirs()
        target.delete()
        target << jUnitJar.bytes
    }

    jar { manifest { attributes 'Main-Class': mainClass } }

    tasks.assemble.dependsOn tasks.shadowJar

    task deployLocal(dependsOn: tasks.shadowJar) {
        /*
         * Gradle copy task creates MD5 hash of the target directory. In this case it is very
         * large and the copy would take several minutes.
         */
        group = 'Deploy'
        description = 'Deploys SETTE to ' + deployTarget.path

        doLast {
            File setteJar = new File(deployTarget, 'sette-all.jar')
            File setteConfig = new File(deployTarget, 'sette.config.json')

            // Always deploy the new JAR
            setteJar.delete()
            setteJar << tasks.shadowJar.archivePath.bytes

            // Only deploy sette.properties of not present
            if (!setteConfig.exists()) {
                setteConfig << new File(project.projectDir, 'sette.config.default.json').text
            }
        }
    }
}

//
// Project sette-core
//
project(':sette-core') {
    def jacocoVersion = '0.7.6.201602180812'

    configurations {
        provided
        compile.extendsFrom provided
    }

    dependencies {
        provided 'org.projectlombok:lombok:1.16.8'

        compile project(':sette-common')

        // Essential for evaluation
        compile 'junit:junit:4.12' // JUnit is used for evaluation (JUnit 4 is compatible with JUnit 3)
        compile 'org.jacoco:org.jacoco.agent:' + jacocoVersion
        compile 'org.jacoco:org.jacoco.core:' + jacocoVersion
        compile 'org.jacoco:org.jacoco.report:' + jacocoVersion
        compile 'com.github.javaparser:javaparser-core:2.3.0'

        // Utilities
        compile 'com.fasterxml.jackson.core:jackson-databind:2.7.2'
        compile 'com.google.guava:guava:19.0'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.simpleframework:simple-xml:2.7.1'

        // Logging
        compile 'org.slf4j:slf4j-api:1.7.18'
        compile 'ch.qos.logback:logback-classic:1.1.6'
    }

    // FIXME
    //    task delombok {
    //        description 'Delomboks the source code'
    //        ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath, name: 'delombok')
    //        ant.mkdir(dir: 'build/src-delomboked')
    //        ant.delombok(verbose: 'true', encoding: 'UTF-8', to: 'build/src-delomboked', from: 'src/')
    //    }
}

//
// Project sette-common
//
project(':sette-common') {
    // Maximaze compatibility for the common project
    project.sourceCompatibility = 1.6
    project.targetCompatibility = 1.6
}

//
// Root project task to generate Gradle wrapper files
//
task wrapper(type: Wrapper) {
    group = 'Build Setup'
    description = 'Generates Gradle 2.12 wrapper files.'
    gradleVersion = '2.12'
}
