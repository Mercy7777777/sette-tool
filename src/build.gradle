buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:+' }
}

// Apply same group, version and repos for all projects
allprojects {
    project.group = 'hu.bme.mit.sette'
    project.version = '2.0.0-SNAPSHOT'

    repositories {  jcenter() }
}

// Set up projects
subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    project.archivesBaseName = project.name
    project.sourceCompatibility = 1.8
    project.targetCompatibility = 1.8

    dependencies {
        testCompile 'org.codehaus.groovy:groovy-all:2.4.5'
        testCompile 'junit:junit:4.12'
    }

    tasks.eclipse.dependsOn tasks.cleanEclipse
    tasks.idea.dependsOn tasks.cleanIdea

    sourceSets {
        main {
            java { srcDirs = ['src']}
            resources { srcDirs = ['resources']}
        }
        test { groovy { srcDirs = ['test']} }
    }
}

//
// Project sette
//
project(':sette') {
    apply plugin: 'com.github.johnrengelman.shadow'
    String mainClass = 'hu.bme.mit.sette.application.SetteApplicationMain'
    File deployTarget = new File(project.projectDir, '../..').canonicalFile

    dependencies {
        compile project(':sette-core')
        compile 'args4j:args4j:2.32'
        compile 'commons-cli:commons-cli:1.3.1' // FIXME remove
    }

    afterEvaluate {
        // Get JUnit JAR
        File jUnitJar = configurations.runtime.resolve().find { File f ->
            String path = f.absolutePath.replace('\\', '/')
            return path.contains('/junit/junit/') && path.toLowerCase().endsWith('.jar')
        }
        if (!jUnitJar) {
            throw new GradleException('Cannot find JUnit JAR on runtime classpath')
        }

        // Copy to resources directory
        File target = new File(sourceSets.main.resources.srcDirs.iterator().next(), 'junit.jar.res')
        target.parentFile.mkdirs()
        target.delete()
        target << jUnitJar.bytes
    }

    jar { manifest { attributes 'Main-Class': mainClass } }

    tasks.assemble.dependsOn tasks.shadowJar

    task deployLocal(dependsOn: tasks.shadowJar) {
        /*
         * Gradle copy task creates MD5 hash of the target directory. In this case it is very
         * large and the copy would take several minutes.
         */
        group = 'Deploy'
        description = 'Deploys SETTE to ' + deployTarget.path

        doLast {
            File setteJar = new File(deployTarget, 'sette-all.jar')
            File setteProps = new File(deployTarget, 'sette.properties')
            File setteLog4j2Xml = new File(deployTarget, 'sette-log4j2.xml')

            // Always deploy the new JAR
            setteJar.delete()
            setteJar << tasks.shadowJar.archivePath.bytes

            // Always deploy log4j2.xml
            setteLog4j2Xml.delete()
            setteLog4j2Xml << new File(project.projectDir, 'log4j2.xml').text

            // Only deploy sette.properties of not present
            if (!setteProps.exists()) {
                setteProps << new File(project.projectDir, 'sette.properties.default').text
            }
        }
    }
}

//
// Project sette-core
//
project(':sette-core') {
    def jacocoVersion = '0.7.5.201505241946'
    def log4jVersion = '2.3'

    configurations {
        provided
        compile.extendsFrom provided
    }

    dependencies {
        provided 'org.projectlombok:lombok:1.16.6'

        compile project(':sette-common')

        // Essential for evaluation
        compile 'junit:junit:4.12' // JUnit is used for evaluation (JUnit 4 is compatible with JUnit 3)
        compile 'org.ow2.asm:asm-debug-all:5.0.4' // to fix JaCoCo dependency
        compile 'org.jacoco:org.jacoco.agent:' + jacocoVersion
        compile 'org.jacoco:org.jacoco.core:' + jacocoVersion
        compile 'org.jacoco:org.jacoco.report:' + jacocoVersion
        compile 'com.github.javaparser:javaparser-core:2.2.2'

        // Utilities
        compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        compile 'com.google.guava:guava:18.0'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.simpleframework:simple-xml:2.7.1'

        // Logging
        compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.apache.logging.log4j:log4j-api:' + log4jVersion
        compile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion
    }

    // FIXME
    //    task delombok {
    //        description 'Delomboks the source code'
    //        ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath, name: 'delombok')
    //        ant.mkdir(dir: 'build/src-delomboked')
    //        ant.delombok(verbose: 'true', encoding: 'UTF-8', to: 'build/src-delomboked', from: 'src/')
    //    }
}

//
// Project sette-common
//
project(':sette-common') {
    // Maximaze compatibility for the common project
    project.sourceCompatibility = 1.6
    project.targetCompatibility = 1.6
}

//
// Root project task to generate Gradle wrapper files
//
task wrapper(type: Wrapper) {
    group = 'Build Setup'
    description = 'Generates Gradle 2.10 wrapper files.'
    gradleVersion = '2.10'
}
