#Requires -Version 3.0

<#

.SYNOPSIS
Gets the data for SETTE evaluation from an MSTest project generated by IntelliTest

.DESCRIPTION
Creates a CSV with the following data

"Category","Snippet","Tool","Coverage","Status","Size","Run","Duration"

.NOTE
The CSV for $RequiredCoverageFileName can be produced by running SETTE on
the SnippetInputChecker tool.

#>

[CmdletBinding()]

param (
	[string] [Parameter(Mandatory=$true)] $TestProject,
	[string] $OutputFileName = "sette-evaluation.csv",
    [string] $CoverageFileName = "sette-coverage.csv",
    [string] $RequiredCoverageFileName = "required-coverage.csv",
	[string] $Run = "run"
)

# load achieved coverage information into a hashtable
$coverages = @{}
Import-Csv $CoverageFileName | % { $coverages.Add( $_.Snippet, $_.Coverage )}

# load required coverage information into a hashtable
$requiredCoverages = @{}
Import-Csv $RequiredCoverageFileName | % { $requiredCoverages.Add( $_.Snippet, $_.RequiredStatementCoverage )}

$results = @()

Get-Item $TestProject | Get-ChildItem -Recurse -Filter *g.cs | % {
	Write-Progress $_
    Write-Verbose $_

	# get the category and snippet name from the filename
	$parts = $_.Name.Split('.')

	$category = $parts[0].Split('_')[0]
    $method = $parts[1].Substring(0, $parts[1].Length - 4) # remove Test from the end
 
	$snippet = $category + "_" + $method

    $coverage = ""
    if ($coverages.ContainsKey($snippet)){
        $coverage = $coverages[$snippet]
    } else {
        Write-Warning "Coverage not found for snippet: $snippet"
    }

    #FIXME measure and process IncludedCoverage also properly

    $status = ""
    if ($requiredCoverages.ContainsKey($snippet)){
        $rc = [int] $requiredCoverages[$snippet]
        $ac = [int] $coverages[$snippet]        

        if ($ac -ge $rc){
            $status = "C"
        } else{
            $status = "NC"
        }

        Write-Verbose "coverage required | achieved | status : $rc | $ac | $status"
    } else {
        Write-Warning "Required coverage not found for snippet: $snippet"
    }

	# get number of [Test] methods, i.e. number of generated tests
	$tests = (Get-Content $_.FullName | Select-String -SimpleMatch "[TestMethod]").Count

	$results += [pscustomobject] @{
        Category = $category;
        Snippet = $snippet;
        Tool = "Pex";
	    Coverage = $coverage;
	    Status = $status;
	    Size = $tests;
	    Run = $Run;
	    Duration = "";
    }
}

$results | Sort-Object -Property Snippet | Export-Csv -Path $OutputFileName -Delimiter "," -Encoding ASCII -NoTypeInformation